" Common =======================================================================
set number
syntax on
" colorscheme default
set tabstop=4
set expandtab
set shiftwidth=4
set autoindent
set smartindent
set scroll=2
if !has('nvim')
  set clipboard=unnamedplus,autoselect
else
  set clipboard=unnamedplus
endif
set nrformats-=octal
set formatoptions+=mM
set whichwrap=b,s,[,],<,>
set backspace=indent,eol,start
set ambiwidth=single
set wildmenu
set cmdheight=1
set laststatus=2
set showcmd
set hlsearch
set wrap
set hidden
set backup
set backupdir=~/.vim/backup
set noswapfile
if executable('fcitx5')
  let g:fcitx_state = 1
  augroup fcitx_savestate
    autocmd!
    autocmd InsertLeave * let g:fcitx_state = str2nr(system('fcitx5-remote'))
    autocmd InsertLeave * call system('fcitx5-remote -c')
    autocmd InsertEnter * call system(g:fcitx_state == 1 ? 'fcitx5-remote -c': 'fcitx5-remote -o')
  augroup END
endif

" Dein =========================================================================
if &compatible
  set nocompatible
endif
" Add the dein installation directory into runtimepath
set runtimepath+=~/.cache/dein/repos/github.com/Shougo/dein.vim

if dein#load_state(expand('~/.cache/dein'))
  call dein#begin(expand('~/.cache/dein'))
  if !has('nvim')
    call dein#add('roxma/vim-hug-neovim-rpc')
    call dein#add('roxma/nvim-yarp')
    call dein#load_toml('~/.vim/dein.toml', {'lazy': 0})
  else
    call dein#load_toml('~/.config/nvim/dein.toml', {'lazy': 0})
  endif
  call dein#end()
  call dein#save_state()
endif

if dein#check_install()
  call dein#install()
endif

filetype plugin indent on
syntax enable
autocmd FileType vue syntax sync fromstart

" Key map ======================================================================
let mapleader = "\<Space>"
nnoremap <leader>w :<C-u>w<CR>
nnoremap <leader>q :<C-u>bd<CR>
nnoremap <silent> <C-l> :<C-u>bnext<CR>
nnoremap <silent> <C-h> :<C-u>bprevious<CR>
" nnoremap j gj
" nnoremap k gk
" nnoremap $ g$
" nnoremap 0 g0
nnoremap Y y$
nnoremap x "_x
nnoremap X "_X
nnoremap d "_d
vnoremap d "_d
nnoremap dd "_dd
nnoremap D "_D
nnoremap U <c-r>
nnoremap M %
vnoremap y mzy`z
nnoremap p ]p`]
nnoremap P ]P`]

nnoremap } }j
nnoremap { {{j
inoremap <silent> jj <ESC>
nnoremap <silent> <ESC><ESC> :noh<CR>
tnoremap <esc> <C-\><C-n>
nnoremap <leader><leader> :<C-u>cd %:h<CR>

" 'junegunn/goyo.vim' ---------------------------------------------------------
nnoremap <silent><leader>l :<C-u>Goyo<CR>
" autocmd! User GoyoEnter Limelight
" autocmd! User GoyoLeave Limelight!
" 'junegunn/fzf.vim' ---------------------------------------------------------
nnoremap <leader>e :<C-u>Files<CR>
nnoremap <leader>g :<C-u>GFiles?<CR>
nnoremap <leader>p :<C-u>Rg<CR>
nnoremap <leader>h :<C-u>History<CR>
nnoremap <leader>b :<C-u>Buffer<CR>
" 'tpope/vim-fugitive' -------------------------------------------------------
nnoremap <leader>G :<C-u>Git<CR>
" 'lambdalisue/fern.vim' -----------------------------------------------------
nnoremap <C-\> :<C-u>Fern . -drawer -toggle -width=50<CR>
nnoremap <leader>d :<C-u>Fern bookmark:///<CR>
" other function -------------------------------------------------------------
" nnoremap <silent> <leader>r :<C-u>call RepeatTerm()<CR>
" function! RepeatTerm()
"   " call term_sendkeys(term_list()[0], "\<c-p> \<c-j>")
"   :!tmux send-keys -t 0:0.0 C-p C-j
" endfunction
" nnoremap <silent> <leader><leader> :<C-u>call CalcMChar()<CR>
" function! CalcMChar()
"   let l:buffer_chars = join(getline(0, '$'), '')
"   echo 'Char count : ' .. strlen(substitute(l:buffer_chars, ".", "x", "g"))
" endfunction

autocmd ColorScheme * highlight Normal ctermbg=none
autocmd ColorScheme * highlight NonText ctermbg=none
autocmd ColorScheme * highlight LineNr ctermbg=none
autocmd ColorScheme * highlight Folded ctermbg=none
autocmd ColorScheme * highlight EndOfBuffer ctermbg=none
colorscheme iceberg
